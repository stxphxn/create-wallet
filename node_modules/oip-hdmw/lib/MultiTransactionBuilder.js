'use strict';

var _bitcoinjsLib = require('bitcoinjs-lib');

var _bitcoinjsLib2 = _interopRequireDefault(_bitcoinjsLib);

var _MultiTransaction = require('./MultiTransaction');

var _MultiTransaction2 = _interopRequireDefault(_MultiTransaction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MultiTransactionBuilder = function (_bitcoin$TransactionB) {
	_inherits(MultiTransactionBuilder, _bitcoin$TransactionB);

	function MultiTransactionBuilder(network, maximumFeeRate) {
		_classCallCheck(this, MultiTransactionBuilder);

		var _this = _possibleConstructorReturn(this, (MultiTransactionBuilder.__proto__ || Object.getPrototypeOf(MultiTransactionBuilder)).call(this, network, maximumFeeRate));

		_this.__tx = new _MultiTransaction2.default();
		return _this;
	}

	return MultiTransactionBuilder;
}(_bitcoinjsLib2.default.TransactionBuilder);

module.exports = MultiTransactionBuilder;