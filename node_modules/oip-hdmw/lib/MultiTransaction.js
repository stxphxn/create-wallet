'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _bitcoinjsLib = require('bitcoinjs-lib');

var _bitcoinjsLib2 = _interopRequireDefault(_bitcoinjsLib);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MultiTransaction = function (_bitcoin$Transaction) {
	_inherits(MultiTransaction, _bitcoin$Transaction);

	function MultiTransaction(extraHexFn) {
		_classCallCheck(this, MultiTransaction);

		var _this = _possibleConstructorReturn(this, (MultiTransaction.__proto__ || Object.getPrototypeOf(MultiTransaction)).call(this));

		_this.__modifyTxHex = extraHexFn;
		return _this;
	}

	_createClass(MultiTransaction, [{
		key: 'clone',
		value: function clone() {
			// Take the modified tx hex as well :)
			var newTx = new MultiTransaction(this.__modifyTxHex);
			newTx.version = this.version;
			newTx.locktime = this.locktime;

			newTx.ins = this.ins.map(function (txIn) {
				return {
					hash: txIn.hash,
					index: txIn.index,
					script: txIn.script,
					sequence: txIn.sequence,
					witness: txIn.witness
				};
			});

			newTx.outs = this.outs.map(function (txOut) {
				return {
					script: txOut.script,
					value: txOut.value
				};
			});

			return newTx;
		}
	}, {
		key: '__toBuffer',
		value: function __toBuffer(buffer, initialOffset, __allowWitness) {
			var tx_hex_buffer = _get(MultiTransaction.prototype.__proto__ || Object.getPrototypeOf(MultiTransaction.prototype), '__toBuffer', this).call(this, buffer, initialOffset, __allowWitness);

			if (this.__modifyTxHex) {
				tx_hex_buffer = this.__modifyTxHex(tx_hex_buffer);
			}

			return tx_hex_buffer;
		}
	}]);

	return MultiTransaction;
}(_bitcoinjsLib2.default.Transaction);

module.exports = MultiTransaction;