import bitcoin from 'bitcoinjs-lib'

class MultiTransaction extends bitcoin.Transaction {
	constructor(extraHexFn){
		super()

		this.__modifyTxHex = extraHexFn
	}
	clone(){
		// Take the modified tx hex as well :)
		const newTx = new MultiTransaction(this.__modifyTxHex)
		newTx.version = this.version
		newTx.locktime = this.locktime

		newTx.ins = this.ins.map(function (txIn) {
			return {
				hash: txIn.hash,
				index: txIn.index,
				script: txIn.script,
				sequence: txIn.sequence,
				witness: txIn.witness
			}
		})

		newTx.outs = this.outs.map(function (txOut) {
			return {
				script: txOut.script,
				value: txOut.value
			}
		})

		return newTx
	}
	__toBuffer(buffer, initialOffset, __allowWitness){
		let tx_hex_buffer = super.__toBuffer(buffer, initialOffset, __allowWitness)

		if (this.__modifyTxHex){
			tx_hex_buffer = this.__modifyTxHex(tx_hex_buffer)
		}

		return tx_hex_buffer
	}
}

module.exports = MultiTransaction